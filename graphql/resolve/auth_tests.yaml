-
  name: "Type Authorization OR dgquery, dgquery filter at root node, rbac rules false"
  gqlquery: |
    query {
      queryUser(filter: {username: {eq: "user1"}}, order: {asc: username}) {
        username
        isPublic
      }
    }
  role: "USER"
  dgquery: |-
    query {
      queryUser(func: type(User), orderasc: User.username) @filter(((eq(User.isPublic, true) OR eq(User.username, "user1")) AND eq(User.username, "user1"))) {
        username : User.username
        isPublic : User.isPublic
        dgraph.uid : uid
      }
    }

-
  name: "Type Authorization OR dgquery, rbac filter at root node, rbac rules false"
  gqlquery: |
    query {
      getProject(projID: "0x1") {
        name
      }
    }
  role: "USER"
  dgquery: |-
    query {
      getProject(func: uid(0x1)) @filter((uid(rule_Project_2) AND type(Project))) {
        name : Project.name
        dgraph.uid : uid
      }
      rule_Project_2 as queryProject(func: type(Project)) @cascade {
        roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
          assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
            username : User.username
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }


-
  name: "Type Authorization AND dgquery, rbac filter at root node, rbac rules false"
  gqlquery: |
    query {
      getIssue(id: "0x1") {
        msg
      }
    }
  role: "USER"
  dgquery: |-
    query {
    }


-
  name: "Type Authorization AND dgquery, dgquery filter at root node, rbac rules false"
  gqlquery: |
    query {
      getMovie(id: "0x1") {
        name
      }
    }
  role: "USER"
  dgquery: |-
    query {
      getMovie(func: uid(0x1)) @filter(((eq(Movie.disabled, false) AND uid(rule_Movie_3)) AND type(Movie))) {
        name : Movie.name
        dgraph.uid : uid
      }
      rule_Movie_3 as queryMovie(func: type(Movie)) @cascade @filter(eq(Movie.disabled, false)) {
        regionsAvailable : Movie.regionsAvailable {
          users : Region.users @filter(eq(User.username, "user1")) {
            username : User.username
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }




-
  name: "Type Authorization filter at root node, rbac rules false"
  gqlquery: |
    query {
      getTicket(id: "0x1") {
        title
      }
    }
  role: "USER"
  dgquery: |-
    query {
      getTicket(func: uid(0x1)) @filter((uid(rule_Ticket_1) AND type(Ticket))) {
        title : Ticket.title
        dgraph.uid : uid
      }
      rule_Ticket_1 as queryTicket(func: type(Ticket)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
                username : User.username
                dgraph.uid : uid
              }
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }




-
  name: "Type Authorization RBAC filter at root node, rbac rules false"
  gqlquery: |
    query {
      getLog(id: "0x1") {
        logs
      }
    }
  role: "USER"
  dgquery: |-
    query {
    }



-
  name: "Type Authorization filter at deep node, rbac rules false"
  gqlquery: |
    query {
      queryProject(filter: {name: {eq: "Project1"}}, order: {asc: name}) {
        name
        columns(filter: {name: {eq: "Column1"}}, order: {asc: name}) {
          name
          tickets(filter: {title: {eq: "Ticket1"}}, order: {asc: title}) {
            id
            title
          }
        }
      }
    }
  role: "USER"
  dgquery: |-
    query {
      queryProject(func: type(Project), orderasc: Project.name) @filter((uid(rule_Project_2) AND eq(Project.name, "Project1"))) {
        name : Project.name
        columns : Project.columns @filter((uid(rule_Column_1) AND eq(Column.name, "Column1"))) (orderasc: Column.name) {
          name : Column.name
          tickets : Column.tickets @filter((uid(rule_Ticket_1) AND eq(Ticket.title, "Ticket1"))) (orderasc: Ticket.title) {
            id : uid
            title : Ticket.title
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      rule_Project_2 as queryProject(func: type(Project)) @cascade {
        roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
          assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
            username : User.username
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      rule_Column_1 as queryColumn(func: type(Column)) @cascade {
        inProject : Column.inProject {
          roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
            assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
              username : User.username
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      rule_Ticket_1 as queryTicket(func: type(Ticket)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
                username : User.username
                dgraph.uid : uid
              }
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }


-
  name: "Field authorization filters at root node, rbac rules false"
  gqlquery: |
    query {
      getUser(username: "user1") {
        username
        age
        disabled
      }
    }
  role: "USER"
  dgquery: |-
    query {
      getUser(func: eq(User.username, "user1")) @filter(((eq(User.isPublic, true) OR eq(User.username, "user1")) AND type(User))) {
        username : User.username
        age : val(getUser.age)
        disabled : User.disabled
        dgraph.uid : uid
      }
      getUser.age(func: type(User)) @cascade @filter(eq(User.username, "user1")) {
        uid
        getUser.age as User.age
      }
    }


-
  name: "Field authorization filters at deep node, rbac rules false"
  gqlquery: |
    query {
      getProject(projID: "0x1") {
        name
        roles {
          permissions
          assignedTo {
            username 
            age 
            disabled
          }
        }
      }
    }
  role: "USER"
  dgquery: |-
    query {
      getProject(func: uid(0x1)) @filter((uid(rule_Project_2) AND type(Project))) {
        name : Project.name
        roles : Project.roles {
          permissions : Role.permissions
          assignedTo : Role.assignedTo @filter(eq(User.isPublic, true)) {
            username : User.username
            age : val(getProject.rolesassignedToage)
            disabled : User.disabled
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      rule_Project_2 as queryProject(func: type(Project)) @cascade {
        roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
          assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
            username : User.username
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      getProject.rolesassignedToage(func: type(Project)) @cascade {
        uid
        Project.roles {
          uid
          Role.assignedTo @filter(eq(User.username, "user1")) {
            uid
            getProject.rolesassignedToage as User.age
          }
        }
      }
    }


-
  name: "Type Authorization OR dgquery, rbac filter at root node, rbac rules true"
  gqlquery: |
    query {
      getProject(projID: "0x1") {
        name
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getProject(func: uid(0x1)) @filter(type(Project)) {
        name : Project.name
        dgraph.uid : uid
      }
    }

-
  name: "Type Authorization AND dgquery, rbac filter at root node, rbac rules true"
  gqlquery: |
    query {
      getIssue(id: "0x1") {
        msg
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getIssue(func: uid(0x1)) @filter((uid(rule_Issue_2) AND type(Issue))) {
        msg : Issue.msg
        dgraph.uid : uid
      }
      rule_Issue_2 as queryIssue(func: type(Issue)) @cascade {
        owner : Issue.owner @filter(eq(User.username, "user1")) {
          username : User.username
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }


-
  name: "Type Authorization AND filter at root node, rbac rules true"
  gqlquery: |
    query {
      getMovie(id: "0x1") {
        name
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getMovie(func: uid(0x1)) @filter(((eq(Movie.disabled, false) AND uid(rule_Movie_3)) AND type(Movie))) {
        name : Movie.name
        dgraph.uid : uid
      }
      rule_Movie_3 as queryMovie(func: type(Movie)) @cascade @filter(eq(Movie.disabled, false)) {
        regionsAvailable : Movie.regionsAvailable {
          users : Region.users @filter(eq(User.username, "user1")) {
            username : User.username
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }


-
  name: "Type Authorization filter at root node, rbac rules true"
  gqlquery: |
    query {
      getTicket(id: "0x1") {
        title
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getTicket(func: uid(0x1)) @filter((uid(rule_Ticket_1) AND type(Ticket))) {
        title : Ticket.title
        dgraph.uid : uid
      }
      rule_Ticket_1 as queryTicket(func: type(Ticket)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
                username : User.username
                dgraph.uid : uid
              }
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }


-
  name: "Type Authorization RBAC filter at root node, rbac rules true"
  gqlquery: |
    query {
      getLog(id: "0x1") {
        logs
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getLog(func: uid(0x1)) @filter(type(Log)) {
        logs : Log.logs
        dgraph.uid : uid
      }
    }


-
  name: "Type Authorization filter at deep node, rbac rules true"
  gqlquery: |
    query {
      queryProject(filter: {name: {eq: "Project1"}}, order: {asc: name}) {
        name
        columns(filter: {name: {eq: "Column1"}}, order: {asc: name}) {
          name
          tickets(filter: {title: {eq: "Ticket1"}}, order: {asc: title}) {
            id
            title
          }
        }
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      queryProject(func: type(Project), orderasc: Project.name) @filter(eq(Project.name, "Project1")) {
        name : Project.name
        columns : Project.columns @filter((uid(rule_Column_1) AND eq(Column.name, "Column1"))) (orderasc: Column.name) {
          name : Column.name
          tickets : Column.tickets @filter((uid(rule_Ticket_1) AND eq(Ticket.title, "Ticket1"))) (orderasc: Ticket.title) {
            id : uid
            title : Ticket.title
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      rule_Column_1 as queryColumn(func: type(Column)) @cascade {
        inProject : Column.inProject {
          roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
            assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
              username : User.username
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      rule_Ticket_1 as queryTicket(func: type(Ticket)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permissions, [VIEW])) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1")) {
                username : User.username
                dgraph.uid : uid
              }
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }


-
  name: "Field authorization filters at root node, rbac rules true"
  gqlquery: |
    query {
      getUser(username: "user1") {
        username
        age
        disabled
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getUser(func: eq(User.username, "user1")) @filter(((eq(User.isPublic, true) OR eq(User.username, "user1")) AND type(User))) {
        username : User.username
        age : val(getUser.age)
        disabled : User.disabled
        dgraph.uid : uid
      }
      getUser.age(func: type(User)) @cascade @filter(eq(User.username, "user1")) {
        uid
        getUser.age as User.age
      }
    }


-
  name: "Field authorization filters at deep node, rbac rules true"
  gqlquery: |
    query {
      getProject(projID: "0x1") {
        name
        roles {
          permissions
          assignedTo {
            username 
            age 
            disabled
          }
        }
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      getProject(func: uid(0x1)) @filter(type(Project)) {
        name : Project.name
        roles : Project.roles {
          permissions : Role.permissions
          assignedTo : Role.assignedTo @filter(eq(User.isPublic, true)) {
            username : User.username
            age : val(getProject.rolesassignedToage)
            disabled : User.disabled
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      getProject.rolesassignedToage(func: type(Project)) @cascade {
        uid
        Project.roles {
          uid
          Role.assignedTo @filter(eq(User.username, "user1")) {
            uid
            getProject.rolesassignedToage as User.age
          }
        }
      }
    }

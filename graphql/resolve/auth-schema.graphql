type User @auth(
    add: { rule: "$ROLE: { eq: ADD-BOT }" },
    update: { or: [ 
        { rule: "$ROLE: { eq: ADMIN }" }, 
        { rule: "(filter: { username: { eq: $USER } })"}
    ]}
    delete: { rule: "false" }) {
  username: String! @id
  bio: String @auth(query: { or: [
        { and: [
          { rule: "filter: {isBioFirstSecret: true}" },
          { rule: "filter: {isBioSecondSecret: true}" },
        ]}, 
        { rule: "filter: {username: {eq: $USER }}"},
    ]})
  isBioFirstSecret: Boolean
  isBioSecondSecret: Boolean
  disabled: Boolean @auth(update: { rule: "$ROLE: { eq: ADMIN }" })
}

type Project @auth(
    # You can view any project that you have at least view permission for.
    # Admins can see the names of every project, but can't see anything else
    # unless they are assigned to the project.
    #
    # This says: there has to be a role on the project that has the VIEW permission
    # and you have to be assigned to that role.
    #
    # It's impossible to say this with the 'and' and 'or' of 'rule'.
    query: { or: [
        { rule: """roles(filter: { permissions: { eq: VIEW } }) { 
                        assignedTo(filter: { username: { eq: $USER } }) 
                    }""" },
        { rule: "$ROLE: { eq: ADMIN }" }
    ]}

    # Only admins can create projects
    add: { rule: "$ROLE: { eq: ADMIN }" }

    # You can update the project if you have project ADMIN permissions.
    # Admins will have to create the project with an intial set of roles
    # (that's a bit crap for a real app, but I just want to test out
    # this sort of permission).
    update: { rule: """roles(filter: { permissions: { eq: CREATE } }) { 
                        assignedTo(filter: { username: { eq: $USER } }) 
                    }""" } }

    # Let's keep all the project history ... it's be just as valid to either
    # delete or move them to some completed state that then can't be edited.
    delete: { rule: "false" }
) {
  projID: ID!
  name: String!
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject) @auth(add: {rule: "DENY"})
}

type Role {
  permissions: [Permission]
  assignedTo: [User]
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}

type Column @auth(
    # you can see a column if you have view permission in it's project
    query: { rule: """inProject { 
                        role(filter: { permission: { eq: VIEW } } ) { 
                            users(filter: { username: { eq: $USER } })
                        }
                    }"""},
    # you can add a column if you are a project admin
    add: { rule: """inProject { 
                        role(filter: { permission: { eq: ADMIN } } ) { 
                            users(filter: { username: { eq: $USER } })
                        }
                    }"""},
    # you can update a column if you are a worker in the project
    update: { rule: """inProject { 
                    role(filter: { permission: { eq: EDIT } } ) { 
                        users(filter: { username: { eq: $USER } })
                    }
                }"""},
    delete: { rule: "false" }
) {
  colID: ID!
  inProject: Project! @auth(update: { rule: "DENY" })
  name: String!
  tickets: [Ticket] @hasInverse(field: onColumn)
}

type Ticket @auth(
    # you can view a ticket if you have view permission in it's project
    query: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: VIEW } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""},
    # you can do any update you like to a ticket if you are a worker in the
    # project
    add: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: WRITE } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""},
    update: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: WRITE } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""},
    delete: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: WRITE } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""}
){
    id: ID!
    onColumn: Column!
    title: String!
    assignedTo: [Users!]
}

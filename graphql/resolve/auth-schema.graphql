type User @auth(
    query: { or : [
        { rule: "query {queryUser(filter: {isPublic: true}){username}}" },
        { rule: "query($User: String!) {queryUser(filter: {username: {eq: $User }}){username}}"},
    ]},
) {
  username: String! @id @search(by: [hash])
  age: Int @auth(query: {rule: "query($User: String!) {queryUser(filter: {username: {eq: $User }}){username}}"})
  isPublic: Boolean @search
  disabled: Boolean 
}

type Region {
  id: ID!
  name: String
  users: [User]
}

type Movie @auth(
    query: { and: [
        {rule: """query{ queryMovie (filter: {disabled: false}) {id}}"""},
        {rule: """query($User: String!) { queryMovie (filter: {disabled: false}) { regionsAvailable { users ( filter: {username: {eq: $User}}) {username}} } }"""},
    ]}
) {
  id : ID!
  name: String
  disabled: Boolean @search
  regionsAvailable: [Region] 
}

type Issue @auth(
    query: {rule: "query($User: String!) { queryIssue { owner(filter: { username: { eq: $User } }) {username} }} "}
) {
  id: ID!
  msg: String
  owner: User!
}

type Log {
  id: ID!
  logs: String
}

type Project @auth(
    query: 
        { rule: """query($User: String!) { queryProject { roles(filter: { permissions: { eq: [VIEW] } }) { 
                        assignedTo(filter: { username: { eq: $User } }) {username}
                    }}}""" }
) {
  projID: ID!
  name: String! @search(by: [hash])
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject) 
}

type Role {
  id: ID!
  permissions: [Permission] @search
  assignedTo: [User]
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}

type Column @auth(
    query: { rule: """query($User: String!) { queryColumn {inProject { 
                        roles(filter: { permissions: { eq: [VIEW] } } ) { 
                            assignedTo(filter: { username: { eq: $User } }){username}
                        }
                    }}}"""},
) {
  colID: ID!
  inProject: Project!   
  name: String! @search(by: [hash])
  tickets: [Ticket] @hasInverse(field: onColumn)
}

type Ticket @auth(
    query: { rule: """query($User: String!) {queryTicket {onColumn {
                        inProject { 
                            roles(filter: { permissions: { eq: [VIEW] } } ) { 
                                assignedTo(filter: { username: { eq: $User } }) {username}
                            } 
                        }
                    }}}"""},
){
    id: ID!
    onColumn: Column!
    title: String! @search(by: [hash])
    assignedTo: [User!]
}

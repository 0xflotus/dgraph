type Product {
    productID: ID!
    name: String @search(by: [term])
    reviews: [Review] @hasInverse(field: about)
}

type Customer {
    username: String! @id @search(by: [hash, regexp])
    reviews: [Review] @hasInverse(field: by)
}

type Review {
    id: ID!
    about: Product!
    by: Customer!
    comment: String @search(by: [fulltext])
    rating: Int @search
}

type Continent @remote {
  code: ID!
  name: String!
  countries: [Country!]!
}

input ContinentFilterInput @remote {
  code: StringQueryOperatorInput
}

type Country @remote {
  code: ID!
  name: String!
  native: String!
  phone: String!
  continent: Continent!
  capital: String
  currency: String
  languages: [Language!]!
  emoji: String!
  emojiU: String!
  states: [State!]!
}

input CountryFilterInput @remote {
  code: StringQueryOperatorInput
  currency: StringQueryOperatorInput
  continent: StringQueryOperatorInput
}

type Language @remote {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
}

input LanguageFilterInput @remote {
  code: StringQueryOperatorInput
}
type State @remote {
  code: String
  name: String!
  country: Country!
}

input StringQueryOperatorInput @remote {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

	type Query {
		getCountries(id: CountryFilterInput): [Country!]! @custom(http: {url: "https://countries.trevorblades.com/", method: "POST", forwardHeaders: ["content-type"], graphql:"query {countries(filter: $id)}"})
	}
const transform = require('graphql-to-json-schema');
 
const schema = transform(process.argv[2]);

console.log(schema);

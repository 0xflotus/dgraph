type User @auth(
    add: { rule: "$ROLE: { eq: ADD-BOT }" },
    update: { or: [ 
        { rule: "$ROLE: { eq: ADMIN }" }, 
        { rule: "(filter: { username: { eq: $USER } })"}
    ]}
    delete: { rule: "false" }) {
  username: String! @id
  age: Int @auth(query: { or: [
        { rule: "filter: {isBioSecret: false}" },
        { rule: "filter: {username: {eq: $USER }}"},
    ]})
  isBioSecret: Boolean
  disabled: Boolean @auth(update: { rule: "$ROLE: { eq: ADMIN }" })
}

type Region {
  id: ID!
  name: String
  users: [User]
}

type Movie @auth(
    query: { and: [
        {rule: """filter: {disabled: false}"""},
        {rule: """regionsAvailable { users ( filter: {username: {eq: $USER}})}"""},
    ]}
  
    add: { rule: "$ROLE: { eq: ADMIN }" }
    update: { rule: "$ROLE: { eq: ADMIN }" }
    delete: { rule: "$ROLE: { eq: ADMIN }" }
) {
  content: String
  disabled: Boolean
  regionsAvailable: [Region] 
}

type Log @auth(
    query: { rule: "$ROLE: { eq: ADMIN }" }
    add: { rule: "$ROLE: { eq: ADMIN }" }
    update: { rule: "$ROLE: { eq: ADMIN }" }
    delete: { rule: "$ROLE: { eq: ADMIN }" }
) {
  id: ID!
  date: DateTime
  logs: String
}

type Project @auth(
    query: { or: [
        { rule: """roles(filter: { permissions: { eq: VIEW } }) { 
                        assignedTo(filter: { username: { eq: $USER } }) 
                    }""" },
        { rule: "$ROLE: { eq: ADMIN }" }
    ]}

    add: { rule: "$ROLE: { eq: ADMIN }" }

    update: { rule: """roles(filter: { permissions: { eq: CREATE } }) { 
                        assignedTo(filter: { username: { eq: $USER } }) 
                    }""" } 

    delete: { rule: "false" }
) {
  projID: ID!
  name: String!
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject) @auth(add: {rule: "DENY"})
}

type Role {
  id: ID!
  permissions: [Permission]
  assignedTo: [User]
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}

type Column @auth(
    query: { rule: """inProject { 
                        role(filter: { permission: { eq: VIEW } } ) { 
                            users(filter: { username: { eq: $USER } })
                        }
                    }"""},
    add: { rule: """inProject { 
                        role(filter: { permission: { eq: ADMIN } } ) { 
                            users(filter: { username: { eq: $USER } })
                        }
                    }"""},
    update: { rule: """inProject { 
                    role(filter: { permission: { eq: EDIT } } ) { 
                        users(filter: { username: { eq: $USER } })
                    }
                }"""},
    delete: { rule: "false" }
) {
  colID: ID!
  inProject: Project! @auth(update: { rule: "DENY" })
  name: String!
  tickets: [Ticket] @hasInverse(field: onColumn)
}

type Ticket @auth(
    query: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: VIEW } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""},
    add: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: WRITE } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""},
    update: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: WRITE } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""},
    delete: { rule: """onColumn {
                        inProject { 
                            role(filter: { permission: { eq: WRITE } } ) { 
                                users(filter: { username: { eq: $USER } })
                            }
                        }
                    }"""}
){
    id: ID!
    onColumn: Column!
    title: String!
    assignedTo: [User!]
}
